{"version":3,"file":"component---src-pages-blog-index-tsx-d147e802e10423260349.js","mappings":"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","sources":["webpack://sohee-devlog/./src/components/Main/CategoryList.tsx","webpack://sohee-devlog/./src/components/Main/ProfileImage.tsx","webpack://sohee-devlog/./src/components/Main/Introduction.tsx","webpack://sohee-devlog/./src/components/Main/PostItem.tsx","webpack://sohee-devlog/./src/hooks/useInfiniteScroll.tsx","webpack://sohee-devlog/./src/components/Main/PostList.tsx","webpack://sohee-devlog/./node_modules/decode-uri-component/index.js","webpack://sohee-devlog/./node_modules/filter-obj/index.js","webpack://sohee-devlog/./node_modules/split-on-first/index.js","webpack://sohee-devlog/./node_modules/query-string/base.js","webpack://sohee-devlog/./node_modules/query-string/index.js","webpack://sohee-devlog/./src/pages/blog/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nexport interface CategoryListProps {\n  selectedCategory: string;\n  categoryList: {\n    [key: string]: number;\n  };\n}\n\nconst CategoryListWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 768px;\n  margin: 100px auto 0;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    margin-top: 50px;\n    padding: 0 20px;\n  }\n`;\n\nconst CategoryItem = styled(Link)<{ active: boolean }>`\n  margin-right: 20px;\n  padding: 5px 0;\n  font-size: 18px;\n  font-weight: ${({ active }) => (active ? '800' : '400')};\n  cursor: pointer;\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`;\n\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\n  selectedCategory,\n  categoryList,\n}) {\n  return (\n    <CategoryListWrapper>\n      {Object.entries(categoryList).map(([name, count]) => (\n        <CategoryItem\n          to={`/?category=${name}`}\n          active={name === selectedCategory}\n          key={name}\n        >\n          #{name}({count})\n        </CategoryItem>\n      ))}\n    </CategoryListWrapper>\n  );\n};\n\nexport default CategoryList;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\n\ninterface ProfileImageProps {\n  profileImage: IGatsbyImageData;\n}\n\nexport default function ProfileImage({ profileImage }: ProfileImageProps) {\n  return <ProfileImageWrapper image={profileImage} alt=\"Profile Image\" />;\n}\n\nconst ProfileImageWrapper = styled(GatsbyImage)`\n  width: 120px;\n  height: 120px;\n  margin-bottom: 30px;\n  border-radius: 50%;\n\n  @media (max-width: 768px) {\n    width: 80px;\n    height: 80px;\n  }\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport ProfileImage from 'components/Main/ProfileImage';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\n\ninterface IntroductionProps {\n  profileImage: IGatsbyImageData;\n}\n\nexport default function Introduction({ profileImage }: IntroductionProps) {\n  return (\n    <Background>\n      <Wrapper>\n        <ProfileImage profileImage={profileImage} />\n        <div>\n          <SubTitle>Nice to Meet You,</SubTitle>\n          <Title>I am Junior Frontend Developer Sohee.</Title>\n        </div>\n      </Wrapper>\n    </Background>\n  );\n}\n\nconst Background = styled.div`\n  width: 100%;\n  color: #ffffff;\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  width: 768px;\n  height: 400px;\n  margin: 0 auto;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    height: 300px;\n    padding: 0 20px;\n  }\n`;\n\nconst SubTitle = styled.div`\n  font-size: 20px;\n  font-weight: 400;\n\n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`;\n\nconst Title = styled.div`\n  margin-top: 5px;\n  font-size: 35px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    font-size: 25px;\n  }\n`;\n","import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport { PostFrontmatterType } from 'types/PostItem.types';\nimport { GatsbyImage } from 'gatsby-plugin-image';\n\nconst PostItem: FunctionComponent<PostFrontmatterType & { link: string }> =\n  function ({\n    title,\n    date,\n    categories,\n    summary,\n    thumbnail: {\n      childImageSharp: { gatsbyImageData },\n    },\n    link,\n  }) {\n    return (\n      <PostItemWrapper to={link}>\n        <ThumbnailImage alt=\"Post Item Image\" image={gatsbyImageData} />\n\n        <PostItemContent>\n          <Title>{title}</Title>\n          <Date>{date}</Date>\n          <Category>\n            {categories.map(category => (\n              <CategoryItem key={category}>{category}</CategoryItem>\n            ))}\n          </Category>\n          <Summary>{summary}</Summary>\n        </PostItemContent>\n      </PostItemWrapper>\n    );\n  };\n\nexport default PostItem;\n\nconst ThumbnailImage = styled(GatsbyImage)`\n  width: 100%;\n  height: 200px;\n  border-radius: 10px 10px 0 0;\n  object-fit: cover;\n`;\n\nconst PostItemWrapper = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  border-radius: 10px;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);\n  transition: 0.3s box-shadow;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n  }\n`;\n\nconst PostItemContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n`;\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-bottom: 3px;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nconst Date = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  opacity: 0.7;\n`;\n\nconst Category = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 10px;\n  margin: 10px -5px;\n`;\n\nconst CategoryItem = styled.div`\n  margin: 2.5px 5px;\n  padding: 3px 5px;\n  border-radius: 3px;\n  background: black;\n  font-size: 14px;\n  font-weight: 700;\n  color: white;\n`;\n\nconst Summary = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 16px;\n  opacity: 0.8;\n`;\n","import { MutableRefObject, useRef, useMemo, useState, useEffect } from 'react';\nimport { PostListItemType } from 'types/PostItem.types';\n\nconst NUMBER_OF_ITEMS_PER_PAGE = 3;\n\nconst useInfiniteScroll = function (\n  selectedCategory: string,\n  posts: PostListItemType[],\n) {\n  const containerRef: MutableRefObject<HTMLDivElement | null> =\n    useRef<HTMLDivElement>(null);\n  const [count, setCount] = useState<number>(1);\n\n  const postListByCategory = useMemo(\n    () =>\n      posts.filter(\n        ({\n          node: {\n            frontmatter: { categories },\n          },\n        }: PostListItemType) =>\n          selectedCategory !== 'All'\n            ? categories.includes(selectedCategory)\n            : true,\n      ),\n    [selectedCategory],\n  );\n\n  const observer: MutableRefObject<IntersectionObserver | null> =\n    useRef<IntersectionObserver>(null);\n\n  // 빌드 시에 Window API 를 사용할 수 없어 module Not Found error가 나지 않도록\n  // 렌더링 이후에 실행되는 useEffect에 사용합니다.\n  useEffect(() => {\n    observer.current = new IntersectionObserver((entries, observer) => {\n      if (!entries[0].isIntersecting) return;\n\n      setCount(value => value + 1);\n      observer.unobserve(entries[0].target);\n    });\n  }, []);\n\n  // 선택된 카테고리가 바뀌면 초기화 합니다.\n  useEffect(() => setCount(1), [selectedCategory]);\n\n  useEffect(() => {\n    if (\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\n      containerRef.current === null ||\n      containerRef.current.children.length === 0\n    ) {\n      return;\n    }\n\n    observer.current?.observe(\n      // 항상 가장 마지막 요소만을 관측합니다.\n      containerRef.current.children[containerRef.current.children.length - 1],\n    );\n  }, [count, selectedCategory]);\n\n  return {\n    containerRef,\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\n  };\n};\n\nexport default useInfiniteScroll;\n","import styled from '@emotion/styled';\nimport PostItem from 'components/Main/PostItem';\nimport useInfiniteScroll from 'hooks/useInfiniteScroll';\nimport { PostListItemType } from 'types/PostItem.types';\n\nconst PostListWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n  width: 768px;\n  margin: 0 auto;\n  padding: 50px 0 100px;\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    width: 100%;\n    padding: 50px 20px;\n  }\n`;\n\ninterface PostListProps {\n  selectedCategory: string;\n  posts: PostListItemType[];\n}\n\nfunction PostList({ selectedCategory, posts }: PostListProps) {\n  const { containerRef, postList } = useInfiniteScroll(selectedCategory, posts);\n\n  console.log(postList);\n  return (\n    <PostListWrapper ref={containerRef}>\n      {postList.map(post => (\n        <PostItem\n          key={post.node.id}\n          {...post.node.frontmatter}\n          link={post.node.fields?.slug}\n        />\n      ))}\n    </PostListWrapper>\n  );\n}\n\nexport default PostList;\n","const token = '%[a-f0-9]{2}';\nconst singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nconst multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn [decodeURIComponent(components.join(''))];\n\t} catch {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tconst left = components.slice(0, split);\n\tconst right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch {\n\t\tlet tokens = input.match(singleMatcher) || [];\n\n\t\tfor (let i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher) || [];\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tconst replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD',\n\t};\n\n\tlet match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch {\n\t\t\tconst result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tconst entries = Object.keys(replaceMap);\n\n\tfor (const key of entries) {\n\t\t// Replace all decoded components\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nexport default function decodeUriComponent(encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n}\n","export function includeKeys(object, predicate) {\n\tconst result = {};\n\n\tif (Array.isArray(predicate)) {\n\t\tfor (const key of predicate) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor?.enumerable) {\n\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// `Reflect.ownKeys()` is required to retrieve symbol properties\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor.enumerable) {\n\t\t\t\tconst value = object[key];\n\t\t\t\tif (predicate(key, value, object)) {\n\t\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function excludeKeys(object, predicate) {\n\tif (Array.isArray(predicate)) {\n\t\tconst set = new Set(predicate);\n\t\treturn includeKeys(object, key => !set.has(key));\n\t}\n\n\treturn includeKeys(object, (key, value, object) => !predicate(key, value, object));\n}\n","export default function splitOnFirst(string, separator) {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (string === '' || separator === '') {\n\t\treturn [];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n}\n","import decodeComponent from 'decode-uri-component';\nimport {includeKeys} from 'filter-obj';\nimport splitOnFirst from 'split-on-first';\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\n// eslint-disable-next-line unicorn/prefer-code-point\nconst strictUriEncode = string => encodeURIComponent(string).replaceAll(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result, [encode(key, options), '[', index, ']'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), '[]'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[]=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), ':list='].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), ':list=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSeparator = options.arrayFormat === 'bracket-separator'\n\t\t\t\t? '[]='\n\t\t\t\t: '=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSeparator, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\tencode(key, options),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : (value === null ? value : decode(value, options));\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null\n\t\t\t\t\t? []\n\t\t\t\t\t: decode(value, options).split(options.arrayFormatSeparator);\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], ...arrayValue];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...[accumulator[key]].flat(), value];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction parseValue(value, options, type) {\n\tif (type === 'string' && typeof value === 'string') {\n\t\treturn value;\n\t}\n\n\tif (typeof type === 'function' && typeof value === 'string') {\n\t\treturn type(value);\n\t}\n\n\tif (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\treturn value.toLowerCase() === 'true';\n\t}\n\n\tif (type === 'number' && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\treturn Number(value);\n\t}\n\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\treturn Number(value);\n\t}\n\n\treturn value;\n}\n\nexport function extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nexport function parse(query, options) {\n\toptions = {\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false,\n\t\ttypes: Object.create(null),\n\t\t...options,\n\t};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst returnValue = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn returnValue;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn returnValue;\n\t}\n\n\tfor (const parameter of query.split('&')) {\n\t\tif (parameter === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst parameter_ = options.decode ? parameter.replaceAll('+', ' ') : parameter;\n\n\t\tlet [key, value] = splitOnFirst(parameter_, '=');\n\n\t\tif (key === undefined) {\n\t\t\tkey = parameter_;\n\t\t}\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : (['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options));\n\t\tformatter(decode(key, options), value, returnValue);\n\t}\n\n\tfor (const [key, value] of Object.entries(returnValue)) {\n\t\tif (typeof value === 'object' && value !== null && options.types[key] !== 'string') {\n\t\t\tfor (const [key2, value2] of Object.entries(value)) {\n\t\t\t\tconst type = options.types[key] ? options.types[key].replace('[]', '') : undefined;\n\t\t\t\tvalue[key2] = parseValue(value2, options, type);\n\t\t\t}\n\t\t} else if (typeof value === 'object' && value !== null && options.types[key] === 'string') {\n\t\t\treturnValue[key] = Object.values(value).join(options.arrayFormatSeparator);\n\t\t} else {\n\t\t\treturnValue[key] = parseValue(value, options, options.types[key]);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn returnValue;\n\t}\n\n\t// TODO: Remove the use of `reduce`.\n\t// eslint-disable-next-line unicorn/no-array-reduce\n\treturn (options.sort === true ? Object.keys(returnValue).sort() : Object.keys(returnValue).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = returnValue[key];\n\t\tresult[key] = Boolean(value) && typeof value === 'object' && !Array.isArray(value) ? keysSorter(value) : value;\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexport function stringify(object, options) {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\t...options,\n\t};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key]))\n\t\t|| (options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = value;\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n}\n\nexport function parseUrl(url, options) {\n\toptions = {\n\t\tdecode: true,\n\t\t...options,\n\t};\n\n\tlet [url_, hash] = splitOnFirst(url, '#');\n\n\tif (url_ === undefined) {\n\t\turl_ = url;\n\t}\n\n\treturn {\n\t\turl: url_?.split('?')?.[0] ?? '',\n\t\tquery: parse(extract(url), options),\n\t\t...(options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}),\n\t};\n}\n\nexport function stringifyUrl(object, options) {\n\toptions = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true,\n\t\t...options,\n\t};\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = extract(object.url);\n\n\tconst query = {\n\t\t...parse(queryFromUrl, {sort: false}),\n\t\t...object.query,\n\t};\n\n\tlet queryString = stringify(query, options);\n\tqueryString &&= `?${queryString}`;\n\n\tlet hash = getHash(object.url);\n\tif (typeof object.fragmentIdentifier === 'string') {\n\t\tconst urlObjectForFragmentEncode = new URL(url);\n\t\turlObjectForFragmentEncode.hash = object.fragmentIdentifier;\n\t\thash = options[encodeFragmentIdentifier] ? urlObjectForFragmentEncode.hash : `#${object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n}\n\nexport function pick(input, filter, options) {\n\toptions = {\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false,\n\t\t...options,\n\t};\n\n\tconst {url, query, fragmentIdentifier} = parseUrl(input, options);\n\n\treturn stringifyUrl({\n\t\turl,\n\t\tquery: includeKeys(query, filter),\n\t\tfragmentIdentifier,\n\t}, options);\n}\n\nexport function exclude(input, filter, options) {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn pick(input, exclusionFilter, options);\n}\n","import * as queryString from './base.js';\n\nexport default queryString;\n","import React from 'react';\nimport Template from 'components/Common/Template';\nimport CategoryList, { CategoryListProps } from 'components/Main/CategoryList';\nimport Introduction from 'components/Main/Introduction';\nimport PostList from 'components/Main/PostList';\nimport { graphql } from 'gatsby';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport queryString, { ParsedQuery } from 'query-string';\nimport { FunctionComponent, useMemo } from 'react';\nimport { PostListItemType, PostType } from 'types/PostItem.types';\n\ninterface IndexPageProps {\n  location: {\n    search: string;\n  };\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        description: string;\n        siteUrl: string;\n      };\n    };\n    allMarkdownRemark: {\n      edges: PostListItemType[];\n    };\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData;\n      };\n      publicURL: string;\n    };\n  };\n}\n\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\n  location: { search },\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges: posts },\n    file: {\n      childImageSharp: { gatsbyImageData },\n      publicURL,\n    },\n  },\n}) {\n  const parsed: ParsedQuery<string> = queryString.parse(search);\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category\n      ? 'All'\n      : parsed.category;\n\n  const categoryList = useMemo(\n    () =>\n      posts.reduce(\n        (\n          list: CategoryListProps['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostType,\n        ) => {\n          categories.forEach(category => {\n            if (list[category] === undefined) list[category] = 1;\n            else list[category]++;\n          });\n\n          list['All']++;\n\n          return list;\n        },\n        { All: 0 },\n      ),\n    [],\n  );\n\n  return (\n    <Template\n      title={title}\n      description={description}\n      url={siteUrl}\n      image={publicURL}\n    >\n      <Introduction profileImage={gatsbyImageData} />\n      <CategoryList\n        selectedCategory={selectedCategory}\n        categoryList={categoryList}\n      />\n      <PostList selectedCategory={selectedCategory} posts={posts} />\n    </Template>\n  );\n};\n\nexport default IndexPage;\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: ASC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`;\n"],"names":["CategoryListWrapper","_styled","target","name","styles","CategoryItem","Link","_ref","active","_ref2","selectedCategory","categoryList","___EmotionJSX","Object","entries","map","_ref3","count","to","key","ProfileImage","profileImage","ProfileImageWrapper","image","alt","GatsbyImage","Introduction","Background","Wrapper","SubTitle","Title","title","date","categories","summary","thumbnail","childImageSharp","gatsbyImageData","link","PostItemWrapper","ThumbnailImage","PostItemContent","Date","Category","category","Summary","posts","containerRef","useRef","setCount","useState","postListByCategory","useMemo","filter","node","frontmatter","includes","observer","useEffect","current","IntersectionObserver","isIntersecting","value","unobserve","_observer$current","length","children","observe","postList","slice","PostListWrapper","useInfiniteScroll","console","log","ref","post","_post$node$fields","PostItem","_extends","id","fields","slug","token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","join","left","right","Array","prototype","concat","call","decode","input","tokens","match","i","decodeUriComponent","encodedURI","TypeError","replaceMap","exec","result","keys","replace","customDecodeURIComponent","includeKeys","object","predicate","isArray","descriptor","getOwnPropertyDescriptor","enumerable","defineProperty","Reflect","ownKeys","splitOnFirst","string","separator","separatorIndex","indexOf","isNullOrUndefined","strictUriEncode","encodeURIComponent","replaceAll","x","charCodeAt","toString","toUpperCase","encodeFragmentIdentifier","Symbol","validateArrayFormatSeparator","encode","options","strict","keysSorter","sort","a","b","Number","removeHash","hashStart","parseValue","type","parseBooleans","toLowerCase","isNaN","trim","parseNumbers","extract","queryStart","parse","query","arrayFormat","arrayFormatSeparator","types","create","formatter","accumulator","undefined","isEncodedArray","newValue","item","test","arrayValue","flat","parserForArrayFormat","returnValue","parameter","parameter_","key2","value2","values","reduce","Boolean","stringify","shouldFilter","skipNull","skipEmptyString","index","keyValueSeparator","encoderForArrayFormat","objectCopy","parseUrl","url","url_","hash","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryString","getHash","urlObjectForFragmentEncode","URL","pick","exclude","location","search","data","site","siteMetadata","description","siteUrl","allMarkdownRemark","edges","file","publicURL","parsed","list","forEach","All","Template","CategoryList","PostList"],"sourceRoot":""}